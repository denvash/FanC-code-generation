%{
  #include "output.hpp"
  #include "parser.hpp"
  #include <string>
  #include <iostream>
  #include <sstream>
  #include "register_handler.hpp"
  #include "generator.hpp"
  #define INT_MAX 255
  extern int yylex();
  extern int yylineno;
  using namespace std;
  void debugPrint(char const*);
  void yyerror(char const*);
  #define _B (CodeBuffer::instance())
  #define _G (Generator::getInstance())
  #define IS_RETURN "@@return statement"
%}
%token VOID INT BYTE B BOOL TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC COMMA LBRACE RBRACE ID NUM STRING
/* https://introcs.cs.princeton.edu/java/11precedence/ */
%right ASSIGN
%left OR
%left AND
%left EQ_RELOP
%nonassoc RELOP
%left PLUS_MINUS
%left MUL_DIV
%right NOT
%right RPAREN
%right LPAREN
%nonassoc NOELSE
%nonassoc ELSE
%%
Program :
    /* Pre Rule Execution */ {
      // debugPrint("Init program");
      init_program();
    }
    Funcs                           {
      // debugPrint("Program Funcs");
    };

Funcs :
    %empty                          {}
    |   FuncDecl Funcs              {
      // debugPrint("FuncDecl Funcs");
    };

FuncDecl:
    RetType ID LPAREN Formals RPAREN {
      // debugPrint("FuncDecl RetType ID LPAREN Formals RPAREN");
      $2.TYPE = $1.TYPE;
      func_init($2,$4);
      // Opens scope before declaring formals
      table.open_scope();
      declare_formals($4);
      _G->func_init($2);
    }
    LBRACE Statements RBRACE CloseScope {
      // debugPrint("FuncDecl Continue: LBRACE Statements RBRACE CloseScope");
      _G->func_end($1,$8);
    };

RetType:
    Type                            {
      // debugPrint("RetType Type");
      $$ = $1;
    }
    |   VOID                        {
      // debugPrint("RetType VOID");
      $$.TYPE = TYPE_VOID;
    };

Formals:
    %empty                          {
      // debugPrint("Formals Epsilon");
      $$.NODE = NULL;
    }
    | FormalsList                   {
      // debugPrint("Formals FormalsList");
      $$ = $1;
    };

FormalsList:
    FormalDecl                      {
      // debugPrint("FormalsList FormalDecl");
      $$.NODE = new FormalsList($1);
    }
    /* Revert the list and the Declaration */
    | FormalsList COMMA FormalDecl  {
      // debugPrint("FormalsList FormalDecl COMMA FormalsList");
      $$.NODE = new FormalsList($1, $3);
    };

FormalDecl:
    Type ID                         {
      // debugPrint("FormalDecl Type ID");
      $$.TYPE = $1.TYPE;
      $$.STRING = $2.STRING;
    };

Statements:
    Statement                       {
      // debugPrint("Statements Statement");
      $$.next_list = $1.next_list;
      $$.break_list = $1.break_list;
      $$.continue_list = $1.continue_list;
    }
    | Statements M Statement          {
      // debugPrint("Statements Statements Statement");
      _G->pb_short_circuit($1,$2,$3);
      $$.next_list = $3.next_list;
      $$.break_list = _B.merge($1.break_list,$3.break_list);
      $$.continue_list = _B.merge($1.continue_list,$3.continue_list);
    };

M:
    %empty                            {
      _G->gen_bp_label($$);
    };

N:
    %empty                            {
      _G->gen_bp_label_makelist($$);
    };

OpenScope:
    %empty                          {
      // debugPrint("OpenScope");
      table.open_scope();
    };

CloseScope:
    %empty                          {
      // debugPrint("CloseScope");
      close_scope();
    };

IfExp:
    IF LPAREN Exp RPAREN           {
      // debugPrint("IfExp IF LPAREN Exp RPAREN");
      $$ = $3;
      $$.NODE = new IfExp($3);
      table.open_scope();
    };

WhileIn:
    %empty                          {
      while_scope_count++;
    };

WhileOut:
    %empty                          {
      while_scope_count--;
    };

WhileTypeCheck:
   WHILE M LPAREN Exp RPAREN          {
      if ($4.TYPE != TYPE_BOOL) {
        err(output::errorMismatch, yylineno);
      }
      $$.true_list = $4.true_list;
      $$.false_list = $4.false_list;
      $$.quad = $2.quad;
   };

Statement:
    /* For if () {}, two scopes should be opened */
    OpenScope LBRACE Statements M RBRACE CloseScope                                    {
      // debugPrint("Statement LBRACE Statements RBRACE");
      $$ = $2;
      $$.next_list = $3.next_list;
      $$.break_list = $3.break_list;
      $$.continue_list = $3.continue_list;
      _B.bpatch($3.next_list,$4.quad);
    }
    | Type ID SC                                                {
      // debugPrint("Statement Type ID SC");
      $2.TYPE = $1.TYPE;
      variable_init($2,true);
      _G->gen_typed_id($2);
    }
    | Type ID ASSIGN Exp SC                                     {
      // debugPrint("Statement Type ID ASSIGN Exp SC");
      $2.TYPE = $1.TYPE;
      variable_init($2,true);
      assign_value($2,$4);
      _G->gen_assign_typed($$,$1,$2,$4);
    }
    | ID ASSIGN Exp SC                                          {
      // debugPrint("Statement ID ASSIGN Exp SC");
      assign_value($1,$3);
      _G->gen_assign($$,$1,$3);
    }
    | Call SC                                                   {
      // debugPrint("Statement Call SC");
      $$ = $1;
    }
    | RETURN SC                                                 {
      // debugPrint("Statement RETURN SC");
      return_value_check(TYPE_VOID);
      _G->gen_return($$);
      $$.is_return = true;
    }
    | RETURN Exp M SC                                             {
      // debugPrint("Statement RETURN Exp SC");
      return_value_check($2.TYPE);
      _G->gen_return_exp($$,$2);
      if($2.TYPE==TYPE_BOOL){
        _B.bpatch($2.true_list,$3.quad); 
        _B.bpatch($2.false_list,$3.quad); 
      }
           $$.is_return = true;
    }
    | IfExp M Statement %prec NOELSE CloseScope               {
      // debugPrint("Statement IfExp Statement %prec NOELSE CloseScope");
      $$.quad = $2.quad;
      _G->gen_bp_boolean_exp($$, $1, $3);
    }
    //  $1  $2   $3                    $6 $7  $8
    | IfExp M Statement CloseScope ELSE N M Statement %prec ELSE           {
      // debugPrint("IfExp M Statement CloseScope ELSE M Statement %prec ELSE");
      _B.bpatch($1.true_list,$2.quad);
      _B.bpatch($1.false_list,$7.quad);
      // _B.bpatch($6.next_list,$7.quad);

      $$.next_list = _B.merge($3.next_list, $8.next_list);
      $$.next_list = _B.merge($$.next_list, $6.next_list);
      $$.break_list = _B.merge($3.break_list, $8.break_list);
      $$.continue_list = _B.merge($3.continue_list, $8.continue_list);
    }
    //    $1                           $4   $5
    | WhileTypeCheck OpenScope WhileIn M Statement CloseScope WhileOut %prec NOELSE   {
      // debugPrint("While noelse");
      _B.bpatch($1.true_list, $4.quad);
      _G->gen_bp_loop($$,$1,$5);
    }
    //    $1                           $4   $5                              9 10  11
    | WhileTypeCheck OpenScope WhileIn M Statement CloseScope WhileOut ELSE N M Statement {
      // debugPrint("While else");
      _B.bpatch($1.true_list, $4.quad);
      _B.bpatch($1.false_list, $10.quad);
      _B.bpatch($5.next_list, $1.quad);
      _B.bpatch($9.next_list, $1.quad);
      _G->gen_bp_loop_else($$,$1,$5,$11);
    }
    | BREAK SC                                                  {
      // debugPrint("BREAK SC");
      if (while_scope_count <= 0) {
        err(output::errorUnexpectedBreak, yylineno);
      }
      _G->gen_br_to_bp($$,true);
    }
    | CONTINUE SC                                               {
      // debugPrint("CONTINUE SC");
      if (while_scope_count <= 0) {
        err(output::errorUnexpectedContinue, yylineno);
      }
      _G->gen_br_to_bp($$,false);
    };

Call:
    ID LPAREN ExpList RPAREN        {
      // debugPrint("Call ID LPAREN ExpList RPAREN");
      $$.NODE = new Call($1,$3);
      $$.TYPE = $$.NODE->get_type();
      _G->func_call($$,$1,$3);
    }
    |   ID LPAREN RPAREN            {
      // debugPrint("Call ID LPAREN RPAREN");
      $$.NODE = new Call($1);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->func_call($$,$1);
    };

ExpList:
    Exp                             {
      // debugPrint("ExpList Exp");
      $$.NODE = new ExpList($1);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->gen_eval_boolean($$,$1);
    }
    /* Reverse Explist and Exp */
    | ExpList COMMA Exp             {
      // debugPrint("ExpList Exp COMMA ExpList");
      $$.NODE = new ExpList($1, $3);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->gen_eval_boolean($$,$3);
    };

Type:
    INT                             {
      // debugPrint("Type INT");
      $$.TYPE = TYPE_INT;
    }
    |   BYTE                        {
      $$.TYPE = TYPE_BYTE;
    }
    |   BOOL                        {
      $$.TYPE = TYPE_BOOL;
    };

Exp:
    LPAREN Exp RPAREN               {
      // debugPrint("Exp LPAREN Exp RPAREN");
      $$ = $2;
    }
    | Exp PLUS_MINUS Exp            {
      // debugPrint("Exp Exp PLUS_MINUS Exp");
      $$.NODE = new Exp($1, *$2.STRING, $3);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->gen_binop($$, $1, $2 ,$3);
    }
    | Exp MUL_DIV Exp               {
      // debugPrint("Exp Exp MUL_DIV Exp");
      $$.NODE = new Exp($1, *$2.STRING, $3);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->gen_binop($$, $1, $2 ,$3);
    }
    | ID                            {
      // debugPrint("Exp ID");
      $$.NODE = new Exp(*$1.STRING);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE ->get_type();
      _G->gen_id($$,$1);
    }
    | Call                          {
      // debugPrint("Exp Call");
      $$ = $1;
    }
    | NUM                           {
      $$.TYPE = TYPE_INT;
      $$.INT = $1.INT;
    }
    | NUM B                         {
      $$.TYPE = TYPE_BYTE;
      $$.INT = $1.INT;
      if ($1.INT > INT_MAX) {
        auto s = static_cast<ostringstream*>( &(ostringstream() << $1.INT) )->str();
        err(output::errorByteTooLarge, yylineno, s);
      }
    }
    | STRING                        {
      // debugPrint("Exp STRING");
      $$.TYPE = TYPE_STRING;
      $$.INT = 1;
      $$.STRING = $1.STRING;
      _G->gen_string($$);
    }
    | TRUE                          {
      // debugPrint("Exp TRUE");
      $$ = $1;
      $$.TYPE = TYPE_BOOL;
      $$.INT = 1;
      _G->makelist_boolean($$,true);
    }
    | FALSE                         {
      $$ = $1;
      $$.TYPE = TYPE_BOOL;
      $$.INT = 0;
      _G->makelist_boolean($$,false);
    }
    | NOT Exp                       {
      $$ = $2;
      $$.TYPE = TYPE_BOOL;
      $$.INT = !$1.INT;
      $$.true_list = $2.false_list;
      $$.false_list = $2.true_list;
    }
    | Exp AND M Exp                   {
      // debugPrint("Exp Exp AND M Exp");
      $$.NODE = new Exp($1, "and", $4);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      $$.quad = $3.quad;
      _G->gen_logicalop($$,$1,"and",$4);
    }
    | Exp OR M Exp                    {
      $$.NODE = new Exp($1, "or", $4);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      $$.quad = $3.quad;
      _G->gen_logicalop($$,$1,"or",$4);
    }
    | Exp EQ_RELOP Exp              {
      // debugPrint("Exp EQ_RELOP Exp");
      $$.NODE = new Exp($1, *$2.STRING, $3);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->gen_relop($$,$1,$2,$3);
    }
    | Exp RELOP Exp                 {
      // debugPrint("Exp Exp RELOP Exp");
      $$.NODE = new Exp($1, *$2.STRING, $3);
      $$.INT = $$.NODE->get_value();
      $$.TYPE = $$.NODE->get_type();
      _G->gen_relop($$,$1,$2,$3);
    };
%%

int main() {
    yyparse();
    close_program();
    _G->generate();
    return 0;
}

void yyerror(char const* s) {
    output::errorSyn(yylineno);
    exit(1);
}

void debugPrint(char const* rule){
    debug("Semantics", rule);
}